This is a simple simulator for RFID networks to implement 
decentralized RFID algorithms using Writable tags. 

At the time been, RRE is implemented. It would be easy to implement 
LEO, RANDOM and DRRE with simple modifications. 

We suggest that for each algorithm, we create a seperate subclasses for 
Reader, Tag, TagContent, MessagePair. 


Note: MessagePair seems to be very similar to TagContent. We keep it 
though, for readability. 



 
The algorithm included: 
RRE, LEO, DRRE, RANDOM, RANDMO+, GDE, GDE-SI, MinMax.



Problem: 
GDE-SI is found to be inefficient and slow. The main reason behind that is the way 
it is implemented in the simulation. Although a distributed version would be efficient, a new 
optimized sequential (centralized) version would be necessary to improve the performance 
of the simulation. 

The main issue found (using a profiler - and ituition) is: the creation of large number of 
integers and hashMap iterators. The first is created from readers writing the actual value of their 
active tags in each of their neighbor tags. This creates unecessary redundancy. The second problem
is caused from the function findMax. 

For the first problem: a reader only writes its id and its owner according to reader. 
There is a cenrtalized table that is updated when all readers terminate the current roud. This 
table contains the values of each reader. Q: how to know when all readers terminated the execution !
-- answer: a centralized class that contains a map <id, done>. 

For the FindMax. Note that we only need two values recorded in the tag. 